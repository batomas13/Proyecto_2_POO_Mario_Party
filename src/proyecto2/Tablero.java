    /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto2;

import java.awt.Color;
import java.awt.Point;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author diemo
 */
public class Tablero extends javax.swing.JFrame {
    public static final int BUTTON_SIZE = 110;
    public static final int BOARD_SIZE = 28;
    private JButton buttonArray[] = new JButton[BOARD_SIZE];
    private String[] listaCasillas = {
        "Carcel", "Tubo1", "Tubo2",
        "Tubo3", "Estrella", "FlorFuego", "FlorHielo",
        "Cola", "Gato", "Gato", "Sopa", "Sopa",
        "Path", "Path", "Memory", "Memory", "Catch",
        "Catch", "Bomber", "Bomber", "Guess", "Guess",
        "Coins", "Coins", "Cards", "Cards"
    };
    private List<String> arrayCasillas;
    
    private int turno = 1;
    private Color colorArray[] = {Color.red, Color.yellow, Color.blue, Color.green, Color.pink, Color.white};
    private ArrayList<Jugador> playerArray = new ArrayList<Jugador>();
    private Jugador jugadorTablero;
    

    /**
     * Creates new form Tablero
     */
    public Tablero() {
        initComponents();
        initPlayers();
        initBoard();
        initRandomTiles();
    }
    
    /**
     * Creates new form Tablero
     */
    public Tablero(Jugador jugadorTablero) {
        this.jugadorTablero = jugadorTablero;
        initComponents();
        initPlayer();
        initBoard();
        initRandomTiles();
    }
    
    
    public void initPlayer() {
        jPanel1.add(jugadorTablero.getRefButton());
        jugadorTablero.refButton.setBounds(0, playerArray.size() * 20, 40, 20);
        playerArray.add(jugadorTablero);
    }
    
    public void initPlayers(){
        
        int playersQty = (new Random()).nextInt(5)+2;
        
        for (int i = 0; i < playersQty; i++) {
            JButton newButton = new JButton("" + (i+1));
            newButton.setBackground(colorArray[i]);
            jPanel1.add(newButton);
            newButton.setBounds(0, i*20, 40, 20);
            playerArray.add(new Jugador("Jugador " + (i+1), i, newButton));            
        }
        
    }
    
    public void initRandomTiles() {
        arrayCasillas = new ArrayList<>(Arrays.asList(listaCasillas));
        Collections.shuffle(arrayCasillas);
        arrayCasillas.add(0, "Inicio");
        arrayCasillas.add("Fin");
        System.out.println("Lista randomizada: " + arrayCasillas);
        System.out.println("Tamaño: " + arrayCasillas.size());
    }
    
    public void initBoard(){
        for (int i = 0; i < buttonArray.length; i++) {
            buttonArray[i] = new JButton((i+1)+"");
            jPanel1.add(buttonArray[i]);
            
            if (i <= 8)
                buttonArray[i].setBounds(i*BUTTON_SIZE, 0, BUTTON_SIZE, BUTTON_SIZE);
            else if (i >=9 && i <= 14)
                buttonArray[i].setBounds(880, (i-8) * BUTTON_SIZE, BUTTON_SIZE, BUTTON_SIZE);
            else if (i >=14 && i <= 21)
                buttonArray[i].setBounds(880-(i-14)* BUTTON_SIZE, 660 , BUTTON_SIZE, BUTTON_SIZE);
            else
                buttonArray[i].setBounds(0, 660-(i-22)* BUTTON_SIZE, BUTTON_SIZE, BUTTON_SIZE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnDados = new javax.swing.JButton();
        txfDados = new javax.swing.JTextField();
        lblTurno = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1121, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 998, Short.MAX_VALUE)
        );

        btnDados.setText("Lanzar dados");
        btnDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDadosActionPerformed(evt);
            }
        });

        txfDados.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N

        lblTurno.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblTurno.setText("Turno 1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnDados)
                                .addGap(81, 81, 81))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(txfDados, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(lblTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 30, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(btnDados)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txfDados, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(lblTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDadosActionPerformed
        int valorDados = this.lanzarDados();
        
        switch (valorDados) {
            case -1 -> {
            }
            case -2 -> {
            }
            default -> {
                // continue con la vida normal
                
                moverFicha(valorDados);
                pintarTurno();
            }
        }
        // castigo de 1 turno
        // castigo de 2 turnos
        this.txfDados.setText(valorDados + "");
    }//GEN-LAST:event_btnDadosActionPerformed

    
    private void moverFicha(int avance){
        Jugador jugadorActual = playerArray.get(turno-1);
        jugadorActual.avanzarCasillaActual(avance);
        JButton botonFicha = playerArray.get(turno-1).getRefButton();
        Point pto = botonFicha.getLocation();
        
        //ubicacion de la casilla donde cayo. x,y
        Point ptoCasilla = buttonArray[jugadorActual.getCasillaActual()-1].getLocation();

        botonFicha.setLocation(ptoCasilla.x, ptoCasilla.y + jugadorActual.getIndex() * 20);
        
        //activa la casilla en que cae el jugador
        activaCasilla(jugadorActual);
        
        // verifica si alguien llegó al final
        if (jugadorActual.getCasillaActual() == 28) {
            System.out.println("GANO");
            JOptionPane.showMessageDialog(null, "Ganó el jugador " + turno, "Ganador", 1);
            this.dispose();
        }
        
    }
    
    private void setNextTurno(){
        turno++;
        if(turno > playerArray.size())
            turno = 1;
    }
    
    private int lanzarDados(){
        int dado1 = (new Random()).nextInt(6) + 1;
        int dado2 = (new Random()).nextInt(6) + 1;
        
        if (dado1 == 6 || dado2 == 6) {
            if (dado1 == 6 && dado2 == 6) {
                // castigo de dos turnos
                return -2;
            }
            // castigo de un turno
            return -1;
        }
        return dado1+dado2;
    }
    
    private void pintarTurno(){
        setNextTurno();
        lblTurno.setText("Turno " + this.turno);
    }
    
    private void activaCasilla(Jugador jugadorActivador) {
        System.out.println("Jugador: " + turno + ", casilla: " + jugadorActivador.getCasillaActual());
        System.out.println("Casilla: " + arrayCasillas.get(jugadorActivador.getCasillaActual() - 1));
        
        String tipoCasilla = arrayCasillas.get(jugadorActivador.getCasillaActual() - 1);
        
        JuegoGenerico nuevaVentanaJuego;
        
        int nuevoAvance;
        switch (tipoCasilla) {
            case "Gato" -> // aqui seleccionar un contrincante aleatorio
                
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
            // peticion de sv
            case "Tubo1" -> {
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
                if(!jugadorActivador.getActivoTubo()) {
                    System.out.println("Jugador no ha activado un tubo anteriormente");
                    jugadorActivador.setActivoTubo(true);
                    int posTubo2 = arrayCasillas.indexOf("Tubo2") + 1;
                    nuevoAvance = posTubo2 - jugadorActivador.getCasillaActual();
                    moverFicha(nuevoAvance);
                } else {
                    jugadorActivador.setActivoTubo(false);
                    System.out.println("Jugador ya ha activado un tubo anteriormente");
                }
            }
            case "Tubo2" -> {
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
                if(!jugadorActivador.getActivoTubo()) {
                    System.out.println("Jugador no ha activado un tubo anteriormente");
                    jugadorActivador.setActivoTubo(true);
                    int posTubo3 = arrayCasillas.indexOf("Tubo3") + 1;
                    nuevoAvance = posTubo3 - jugadorActivador.getCasillaActual();
                    moverFicha(nuevoAvance);
                } else {
                    jugadorActivador.setActivoTubo(false);
                    System.out.println("Jugador ya ha activado un tubo anteriormente");
                }
            }
            case "Tubo3" -> {
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
                if(!jugadorActivador.getActivoTubo()) {
                    System.out.println("Jugador no ha activado un tubo anteriormente");
                    jugadorActivador.setActivoTubo(true);
                    int posTubo1 = arrayCasillas.indexOf("Tubo1") + 1;
                    nuevoAvance = posTubo1 - jugadorActivador.getCasillaActual();
                    moverFicha(nuevoAvance);
                } else {
                    jugadorActivador.setActivoTubo(false);
                    System.out.println("Jugador ya ha activado un tubo anteriormente");
                }
            }
            case "Estrella" -> {
                // volver a lanzar dados
                lanzarDados();
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
            }
            case "FlorFuego" -> // lanzar a un jugador a la casilla 1
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
            case "FlorHielo" -> // Hace que un jugador pierda 2 turnos
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
            case "Cola" -> {
                // Jugador escoge en rando +-3 de casillas para moverse
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
                nuevoAvance = -3 + (int)(Math.random() * ((3 - -3) + 1));
                System.out.println("Cola: Salto random de: " + nuevoAvance);
                moverFicha(nuevoAvance);
            }
            case "Sopa" -> {
                // juego de sopa de letras
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
                nuevaVentanaJuego = new Juego_Sopa();
            }
            case "Path" -> {
                // juego de memory path
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
                nuevaVentanaJuego = new Juego_Path();
                nuevaVentanaJuego.setVisible(true);
            }
            case "Memory" -> // juego de card memory
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
            case "Catch" -> {
                // juego de catch the cat
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
                nuevaVentanaJuego = new Juego_Catch();
                nuevaVentanaJuego.setVisible(true);
            }
            case "Bomber" -> {
                // juego de bombermario
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
                nuevaVentanaJuego = new Juego_bombermario();
                nuevaVentanaJuego.setVisible(true);
            }
            case "Guess" -> {
                // juego de guess who
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
                try {
                    nuevaVentanaJuego = new Juego_Who();
                    nuevaVentanaJuego.setVisible(true);
                } catch (IOException e) {
                    System.out.println("Algo paso mal con el juego de guess who");
                }
            }
            case "Coins" -> {
                // juego de collect the coins
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
                nuevaVentanaJuego = new Juego_Coins();
                nuevaVentanaJuego.setVisible(true);
            }
            case "Cards" -> // juego de mario cards, TODOS los jugadores participan
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
            // pedirle al sv que abra un Juego_Cards a todos
            default -> // caso default, no debería caer aquí excepto por final que no hace nada más que ganar el juego
                // o la casilla del inicio si se regresa
                System.out.println("Activasión: jugador " + jugadorActivador.getNombre() + " activa casilla de " + tipoCasilla);
        }
        
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tablero().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDados;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblTurno;
    private javax.swing.JTextField txfDados;
    // End of variables declaration//GEN-END:variables
}
