/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto2;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 *
 * @author Adrian
 */
public class Juego_Sopa extends javax.swing.JFrame {

    private ArrayList<String> listaPalabras;
    ArrayList<String> palabrasBuscar = new ArrayList<String>();
    ArrayList<String> palabrasCorrectas = new ArrayList<String>();
    private char[][] sopa;
    private int[] sitio = new int[]{-1, -1, -1};
    /**
     * Creates new form Juego_Sopa
     */
    public Juego_Sopa() {
        initComponents();
        generaTablero(10);
        cargaDiccionario();
        escogePalabras();
        colocaVertical(palabrasBuscar.get(0));
        colocaHorizontal(palabrasBuscar.get(1));
        imprimeSopa();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 800));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Juego_Sopa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Juego_Sopa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Juego_Sopa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Juego_Sopa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Juego_Sopa().setVisible(true);
            }
        });
        
    }
    
    public void cargaDiccionario() {
        try (Stream<String> lines = Files.lines(Paths.get("diccionario_sopa.txt"))) {
            listaPalabras = (ArrayList<String>) lines.collect(Collectors.toList());
	} catch (IOException e) {
            System.out.println("Error al cargar el diccionario");
            e.printStackTrace();
        }
        System.out.println(listaPalabras);
    }
    
    public void escogePalabras() {
        Random rn = new Random();
        palabrasBuscar.add(listaPalabras.get(rn.nextInt(106)));
        palabrasBuscar.add(listaPalabras.get(rn.nextInt(106)));
        palabrasBuscar.add(listaPalabras.get(rn.nextInt(106)));
        palabrasBuscar.add(listaPalabras.get(rn.nextInt(106)));
        System.out.println("Palabras escogidas: " + palabrasBuscar);
    }
    
    // genera un tablero con el tamaño aleatorio
    public void generaTablero(int size) {
        this.sopa = new char[size][size];
        for (int i = 0; i < sopa.length; i++) {
            for (int j = 0; j < sopa.length; j++) {
                sopa[i][j] = 0;
            }
        }
    }
    
    public void imprimeSopa() {
        for (int i = 0; i < sopa.length; i++) {
            for (int j = 0; j < sopa.length; j++) {
                System.out.print(sopa[i][j] + " ");
            }
            System.out.println("");
        }
    }
    
    // coloca una palabra en posición vertical
    public void colocaVertical(String palabra) {
        char[] letrasPalabra = palabra.toCharArray();
        // inicio valores aleatorios que pueda caber en el tablero para la palabra
        boolean success = false;
        boolean isOccupied;
        int startSeed;
        int rLoc;
        while (!success) {
            
            startSeed = new Random().nextInt(sopa.length - palabra.length());
            rLoc = new Random().nextInt(sopa.length);
            for (int i = 0; i < letrasPalabra.length; i++) {
                if (sopa[startSeed + i][rLoc] != 0) {
                    isOccupied = true;
                }
                
            }
            
            if (success) {
                break;
            }
        }
        
        
    }
    
    // coloca una palabra en posición horizontal
    public void colocaHorizontal(String palabra) {
        char[] letrasPalabra = palabra.toCharArray();
        // inicio valores aleatorios que pueda caber en el tablero para la palabra
        int startSeed = new Random().nextInt(sopa.length - palabra.length());
        int rLoc = new Random().nextInt(sopa.length);
        for (int i = 0; i < letrasPalabra.length; i++) {
            sopa[rLoc][startSeed + i] = letrasPalabra[i];
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
